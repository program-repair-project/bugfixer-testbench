#!/usr/bin/env python
import argparse
import sys
import os
import shutil
import subprocess
import errno


# https://stackoverflow.com/questions/600268/mkdir-p-functionality-in-python
def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as exc:
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else:
            raise

def preprocess(obj_mode, base_mode, use_m32, cfgflags):
    # compute the appropriate flags
    cflags = "-m32" if use_m32 else ""
    cxxflags = "-m32" if use_m32 else ""
    ldflags = "-m32" if use_m32 else ""
    cfgflags = cfgflags if cfgflags else ""

    option = '-save-temps=obj' if obj_mode else '-save-temps'

    with open('/experiment/manifest.txt', 'r') as f:
      files = [fn.strip() for fn in f]

    # destroy the current contents, if any, of the preprocessed directory
    shutil.rmtree('/experiment/preprocessed', ignore_errors=True)
    os.mkdir('/experiment/preprocessed')

    # recompile
    cmd = './configure CFLAGS="{} {}" CXXFLAGS="{}" LDFLAGS="{}" {}'
    cmd = cmd.format(cflags, option, cxxflags, ldflags, cfgflags)

    os.chdir('/experiment/src')
    subprocess.check_call(cmd, shell=True)
    subprocess.check_call('make clean && make', shell=True)

    # extract preprocessed files
    for fn in files:
        fn_preprocessed = fn

        if base_mode:
            fn_preprocessed = os.path.basename(fn)

        # trim the suffix
        fn_preprocessed = fn_preprocessed.rpartition('.')[0]

        fn_preprocessed = os.path.join('/experiment/src/', fn_preprocessed + '.i')
        fn_dest = os.path.join('/experiment/preprocessed/', fn)

        # create necessary dirs
        mkdir_p(os.path.dirname(fn_dest))

        os.rename(fn_preprocessed, fn_dest)

    # tidy up
    cmd = './configure CFLAGS="{}" CXXFLAGS="{}" LDFLAGS="{}" {}'
    cmd = cmd.format(cflags, cxxflags, ldflags, cfgflags)

    subprocess.check_call('make clean', shell=True)
    subprocess.check_call(cmd, shell=True)

    for root, dirs, files in os.walk('/experiment/src'):
        for fn in files:
            if fn.endswith('.i') or fn.endswith('.s'):
                fn = os.path.join(root, fn)
                os.remove(fn)

    # self-destruct
    os.remove('/experiment/preprocess')


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--m32', action='store_true')
    parser.add_argument('--cfg', type=str, default='')
    parser.add_argument('--obj', action='store_true')
    parser.add_argument('--base', action='store_true')
    args = parser.parse_args()

    preprocess(obj_mode=args.obj,
               base_mode=args.base,
               cfgflags=args.cfg,
               use_m32=args.m32)
